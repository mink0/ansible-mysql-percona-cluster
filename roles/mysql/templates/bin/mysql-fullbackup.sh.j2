#!/usr/bin/env bash

BACKUP_PATH="${BACKUP_PATH:-{{ mysql_repl_backup_path }}}"
BACKUP_OPTS="${BACKUP_OPTS}"

main() {
  if [ ! -f "$BACKUP_PATH" ]; then
    log::ok "removing previous backup: $BACKUP_PATH"
    rm -rf "$BACKUP_PATH"
  fi

  start=`date +%s`
  log::ok "creating full mysql database backup..."
  run "innobackupex --no-timestamp --safe-slave-backup $BACKUP_OPTS $BACKUP_PATH"

  log::ok "applying log to backup..."
  run "innobackupex --apply-log $BACKUP_PATH"
  end=`date +%s`

  log "database lock duration: $((end-start)) seconds"
  log "backup size: $(du -hs $BACKUP_PATH)"

  log "creating backup archive"
  run "tar --remove-files -czvf $BACKUP_PATH.tgz -C $BACKUP_PATH ."
  log "archive size: $(du -hs $BACKUP_PATH.tgz)"

  log::ok "success!"
}

run() {
  local cmd_string="$1"

  [[ -z "${cmd_string// }" ]] && err 'no command specified'

  log_raw "$ " "yellow" "$cmd_string"

  eval "$cmd_string" || err "$cmd failed"
}

if [[ ! -f "$BACKUP_PATH" ]]; then
  echo "removing previous backup $BACKUP_PATH"
  rm -rf "$BACKUP_PATH"
fi

check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root!"

    err "missing root privileges"
  fi
}

log_raw() {
  local prefix="$1"
  shift
  local color="$1"
  shift

  color_var=color_$color

  echo -e "${!color_var}${prefix}${@}${color_reset}"
}

log() {
  log_raw "> " "" "$@"
}

log::ok() {
  log_raw "> " "green" "$@"
}

log::err() {
  log_raw "" "red" "$@" 1>&2
}

err() {
  log::err "Error: $@"
  exit 1
}

init_colors() {
  # check if stdout is a terminal...
  [[ ! -t 1 ]] && return

  # check color support
  ncolors=$(tput colors)
  [[ $ncolors -ge 8 ]] || return

  readonly color_reset='\033[0;39m'
  readonly color_red='\033[1;31m'
  readonly color_green='\033[1;32m'
  readonly color_yellow='\033[1;33m'
  readonly color_gray='\033[1;30m'
}

init_colors
check_root
main "$@"
